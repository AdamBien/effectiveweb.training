{"version":3,"file":"render.js","sourceRoot":"","sources":["../src/lib/render.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,YAAY,EAAE,WAAW,EAAC,MAAM,UAAU,CAAC;AACnD,OAAO,EAAC,eAAe,IAAI,sBAAsB,EAAkB,MAAM,uBAAuB,CAAC;AACjG,OAAO,EAAC,gBAAgB,EAAC,MAAM,wBAAwB,CAAC;AAOxD;;;;;;;;;;;;;GAaG;AACH,MAAM,iBACF,MAAsB,EACtB,SAAmC,EACnC,kBAAmC,sBAAsB;IAC3D,MAAM,QAAQ,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;IACzC,IAAI,QAAQ,GAAI,SAA+B,CAAC,kBAAkB,CAAC;IACnE,oCAAoC;IACpC,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ;QACxD,QAAQ,CAAC,SAAS,KAAK,MAAM,CAAC,SAAS,EAAE;QAC3C,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/B,OAAO;KACR;IACD,4DAA4D;IAC5D,QAAQ,GAAG,IAAI,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAC5E,SAA+B,CAAC,kBAAkB,GAAG,QAAQ,CAAC;IAC/D,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;IACnC,WAAW,CAAC,SAAS,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,6DAA6D;IAC7D,IAAI,YAAY,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;QAC1C,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC7B,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAClC;IACD,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAChC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACjC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill, removeNodes} from './dom.js';\nimport {templateFactory as defaultTemplateFactory, TemplateFactory} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\n\nexport type TemplateContainer = (Element|DocumentFragment)&{\n  __templateInstance?: TemplateInstance;\n};\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(\n    result: TemplateResult,\n    container: Element|DocumentFragment,\n    templateFactory: TemplateFactory = defaultTemplateFactory) {\n  const template = templateFactory(result);\n  let instance = (container as TemplateContainer).__templateInstance;\n  // Repeat render, just call update()\n  if (instance !== undefined && instance.template === template &&\n      instance.processor === result.processor) {\n    instance.update(result.values);\n    return;\n  }\n  // First render, create a new TemplateInstance and append it\n  instance = new TemplateInstance(template, result.processor, templateFactory);\n  (container as TemplateContainer).__templateInstance = instance;\n  const fragment = instance._clone();\n  removeNodes(container, container.firstChild);\n  // Since we cloned in the polyfill case, now force an upgrade\n  if (isCEPolyfill && !container.isConnected) {\n    document.adoptNode(fragment);\n    customElements.upgrade(fragment);\n  }\n  container.appendChild(fragment);\n  instance.update(result.values);\n}\n"]}