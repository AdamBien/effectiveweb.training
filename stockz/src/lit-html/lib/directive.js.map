{"version":3,"file":"directive.js","sourceRoot":"","sources":["../src/lib/directive.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAIH,MAAM,UAAU,GAAG,IAAI,OAAO,EAAgB,CAAC;AAM/C,MAAM,CAAC,MAAM,SAAS,GAAG,CAAW,CAAe,EAAgB,EAAE;IACnE,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACxB,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,CAAM,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './parts.js';\n\nconst directives = new WeakMap<any, Boolean>();\n\nexport interface Directive<P = Part> {\n  (part: P): void;\n}\n\nexport const directive = <P = Part>(f: Directive<P>): Directive<P> => {\n  directives.set(f, true);\n  return f;\n};\n\nexport const isDirective = (o: any) => directives.has(o);\n"]}