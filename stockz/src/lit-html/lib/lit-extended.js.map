{"version":3,"file":"lit-extended.js","sourceRoot":"","sources":["../src/lib/lit-extended.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,kBAAkB,EAAE,oBAAoB,EAAE,SAAS,EAAQ,iBAAiB,EAAC,MAAM,YAAY,CAAC;AACxG,OAAO,EAAC,iBAAiB,EAAC,MAAM,yBAAyB,CAAC;AAC1D,OAAO,EAAC,iBAAiB,EAAE,cAAc,EAAC,MAAM,sBAAsB,CAAC;AAEvE,OAAO,EAAC,oBAAoB,EAAE,SAAS,EAAC,MAAM,YAAY,CAAC;AAC3D,OAAO,EAAC,MAAM,EAAC,MAAM,aAAa,CAAC;AAEnC;;GAEG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,OAA6B,EAAE,GAAG,MAAa,EAAE,EAAE,CACpE,IAAI,cAAc,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;AAEnE;;GAEG;AACH,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,OAA6B,EAAE,GAAG,MAAa,EAAE,EAAE,CACnE,IAAI,iBAAiB,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAAC;AAErE;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,OAAO,4BAA6B,SAAQ,iBAAiB;IACjE,0BAA0B,CAAC,OAAgB,EAAE,IAAY,EAAE,OAAiB;QAE1E,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE;YAC/B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;SAC5C;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9C,IAAI,QAAQ,KAAK,GAAG,EAAE;YACpB,MAAM,QAAQ,GACV,IAAI,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YAChE,OAAO,QAAQ,CAAC,KAAK,CAAC;SACvB;QACD,IAAI,QAAQ,KAAK,GAAG,EAAE;YACpB,OAAO,CAAC,IAAI,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;SACxE;QACD,MAAM,QAAQ,GAAG,IAAI,iBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC/D,OAAO,QAAQ,CAAC,KAAK,CAAC;IACxB,CAAC;CACF;AACD,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,4BAA4B,EAAE,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributeCommitter, BooleanAttributePart, EventPart, Part, PropertyCommitter} from './parts.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './template-result.js';\n\nexport {BooleanAttributePart, EventPart} from './parts.js';\nexport {render} from './render.js';\n\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings: TemplateStringsArray, ...values: any[]) =>\n    new TemplateResult(strings, values, 'html', templateProcessor);\n\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: any[]) =>\n    new SVGTemplateResult(strings, values, 'svg', templateProcessor);\n\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n * @deprecated Please use /lit-html.js instead. lit-extended will be removed in\n *     a future version.\n */\nexport class LitExtendedTemplateProcessor extends TemplateProcessor {\n  handleAttributeExpressions(element: Element, name: string, strings: string[]):\n      Part[] {\n    if (name.substr(0, 3) === 'on-') {\n      const eventName = name.slice(3);\n      return [new EventPart(element, eventName)];\n    }\n    const lastChar = name.substr(name.length - 1);\n    if (lastChar === '$') {\n      const comitter =\n          new AttributeCommitter(element, name.slice(0, -1), strings);\n      return comitter.parts;\n    }\n    if (lastChar === '?') {\n      return [new BooleanAttributePart(element, name.slice(0, -1), strings)];\n    }\n    const comitter = new PropertyCommitter(element, name, strings);\n    return comitter.parts;\n  }\n}\nexport const templateProcessor = new LitExtendedTemplateProcessor();\n"]}