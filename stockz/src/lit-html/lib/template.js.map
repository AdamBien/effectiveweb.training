{"version":3,"file":"template.js","sourceRoot":"","sources":["../src/lib/template.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\nexport const rewritesStyleAttribute = (() => {\n  const el = document.createElement('div');\n  el.setAttribute('style', '{{bad value}}');\n  return el.getAttribute('style') !== '{{bad value}}';\n})();\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          content,\n          133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                 NodeFilter.SHOW_TEXT */\n          ,\n          null as any,\n          false);\n      // The actual previous node, accounting for removals: if a node is removed\n      // it will never be the previousNode.\n      let previousNode: Node|undefined;\n      // Used to set previousNode at the top of the loop.\n      let currentNode: Node|undefined;\n      while (walker.nextNode()) {\n        index++;\n        previousNode = currentNode;\n        const node = currentNode = walker.currentNode as Element;\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if (node.hasAttributes()) {\n            const attributes = node.attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondance between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = result.strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)![2];\n              // Find the corresponding attribute\n              // If the attribute name contains special characters, lower-case\n              // it so that on XML nodes with case-sensitive getAttribute() we\n              // can still find the attribute, which will have been lower-cased\n              // by the parser.\n              //\n              // If the attribute name doesn't contain special character, it's\n              // important to _not_ lower-case it, in case the name is\n              // case-sensitive, like with XML attributes like \"viewBox\".\n              const attributeLookupName =\n                  (rewritesStyleAttribute && name === 'style') ?\n                  'style$' :\n                  /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n              const attributeValue = node.getAttribute(attributeLookupName)!;\n              const strings = attributeValue.split(markerRegex);\n              this.parts.push({type: 'attribute', index, name, strings});\n              node.removeAttribute(attributeLookupName);\n              partIndex += strings.length - 1;\n            }\n          }\n          if (node.tagName === 'TEMPLATE') {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const nodeValue = node.nodeValue!;\n          if (nodeValue.indexOf(marker) < 0) {\n            continue;\n          }\n          const parent = node.parentNode!;\n          const strings = nodeValue.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // We have a part for each match found\n          partIndex += lastIndex;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            parent.insertBefore(\n                (strings[i] === '') ? createMarker() :\n                                      document.createTextNode(strings[i]),\n                node);\n            this.parts.push({type: 'node', index: index++});\n          }\n          parent.insertBefore(\n              strings[lastIndex] === '' ?\n                  createMarker() :\n                  document.createTextNode(strings[lastIndex]),\n              node);\n          nodesToRemove.push(node);\n        } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if (node.nodeValue === marker) {\n            const parent = node.parentNode!;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * previousSibling is being removed (thus it's not the\n            //    `previousNode`)\n            //  * previousSibling is not a Text node\n            //\n            // TODO(justinfagnani): We should be able to use the previousNode\n            // here as the marker node and reduce the number of extra nodes we\n            // add to a template. See\n            // https://github.com/PolymerLabs/lit-html/issues/147\n            const previousSibling = node.previousSibling;\n            if (previousSibling === null || previousSibling !== previousNode ||\n                previousSibling.nodeType !== Node.TEXT_NODE) {\n              parent.insertBefore(createMarker(), node);\n            } else {\n              index--;\n            }\n            this.parts.push({type: 'node', index: index++});\n            nodesToRemove.push(node);\n            // If we don't have a nextSibling add a marker node.\n            // We don't have to check if the next node is going to be removed,\n            // because that node will induce a new marker if so.\n            if (node.nextSibling === null) {\n              parent.insertBefore(createMarker(), node);\n            } else {\n              index--;\n            }\n            currentNode = previousNode;\n            partIndex++;\n          } else {\n            let i = -1;\n            while ((i = node.nodeValue!.indexOf(marker, i + 1)) !== -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({type: 'node', index: -1});\n            }\n          }\n        }\n      }\n    };\n    _prepareTemplate(element);\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  type: 'node',\n  index: number\n}|{type: 'attribute', index: number, name: string, strings: string[]};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n"]}