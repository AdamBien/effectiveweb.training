{"version":3,"file":"template-result.js","sourceRoot":"","sources":["../src/lib/template-result.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,aAAa,EAAC,MAAM,UAAU,CAAC;AACvC,OAAO,EAAC,wBAAwB,EAAoB,MAAM,yBAAyB,CAAC;AACpF,OAAO,EAAC,sBAAsB,EAAE,MAAM,EAAE,UAAU,EAAE,sBAAsB,EAAC,MAAM,eAAe,CAAC;AAEjG;;;GAGG;AACH,MAAM;IAMJ,YACI,OAA6B,EAAE,MAAa,EAAE,IAAY,EAC1D,YAA+B,wBAAwB;QACzD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,OAAO;QACL,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAClC,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,aAAa,GAAG,IAAI,CAAC;QACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,CAAC,CAAC;YACV,MAAM,KAAK,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACjC,0EAA0E;YAC1E,yEAAyE;YACzE,wCAAwC;YACxC,EAAE;YACF,oDAAoD;YACpD,2CAA2C;YAC3C,8CAA8C;YAC9C,aAAa;gBACT,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAEtE,IAAI,CAAC,aAAa,IAAI,sBAAsB,EAAE;gBAC5C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;oBAChE,OAAO,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gBACvD,CAAC,CAAC,CAAC;aACJ;YACD,IAAI,IAAI,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC;SAC7C;QACD,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,kBAAkB;QAChB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACpD,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAED;;;;;;GAMG;AACH,MAAM,wBAAyB,SAAQ,cAAc;IACnD,OAAO;QACL,OAAO,QAAQ,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC;IACzC,CAAC;IAED,kBAAkB;QAChB,MAAM,QAAQ,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC5C,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QACjC,MAAM,UAAU,GAAG,OAAO,CAAC,UAAW,CAAC;QACvC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAChC,aAAa,CAAC,OAAO,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;QAC9C,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {reparentNodes} from './dom.js';\nimport {defaultTemplateProcessor, TemplateProcessor} from './template-processor.js';\nimport {lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: any[];\n  type: string;\n  processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: any[], type: string,\n      processor: TemplateProcessor = defaultTemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a <template> element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isTextBinding = true;\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      html += s;\n      const close = s.lastIndexOf('>');\n      // We're in a text position if the previous string closed its last tag, an\n      // attribute position if the string opened an unclosed tag, and unchanged\n      // if the string had no brackets at all:\n      //\n      // \"...>...\": text position. open === -1, close > -1\n      // \"...<...\": attribute position. open > -1\n      // \"...\": no change. open === -1, close === -1\n      isTextBinding =\n          (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n\n      if (!isTextBinding && rewritesStyleAttribute) {\n        html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n          return (p2 === 'style') ? `${p1}style$${p3}` : match;\n        });\n      }\n      html += isTextBinding ? nodeMarker : marker;\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n"]}