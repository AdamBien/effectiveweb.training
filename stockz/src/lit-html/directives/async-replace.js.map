{"version":3,"file":"async-replace.js","sourceRoot":"","sources":["../src/directives/async-replace.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;AAEH,OAAO,EAAC,SAAS,EAAa,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AAE9D;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,MAAM,YAAY,GACrB,CAAI,KAAuB,EAAE,MAAsC,EAC3C,EAAE,CAAC,SAAS,CAAC,KAAK,EAAE,IAAc,EAAE,EAAE;;IACxD,kEAAkE;IAClE,kBAAkB;IAClB,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;QACxB,OAAO;KACR;IAED,sEAAsE;IACtE,qCAAqC;IACrC,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACpD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IAEtB,IAAI,CAAC,GAAG,CAAC,CAAC;;QAEV,KAAoB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;YAAd,IAAI,CAAC,kBAAA,CAAA;YACd,8DAA8D;YAC9D,kDAAkD;YAClD,IAAI,CAAC,KAAK,CAAC,EAAE;gBACX,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC/B;YAED,kEAAkE;YAClE,+DAA+D;YAC/D,IAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;gBAC3B,MAAM;aACP;YAED,yDAAyD;YACzD,kEAAkE;YAClE,iEAAiE;YACjE,sCAAsC;YACtC,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aAClB;YAED,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrB,QAAQ,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC,EAAE,CAAC;SACL;;;;;;;;;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {directive, Directive, NodePart} from '../lit-html.js';\n\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://github.com/tc39/proposal-async-iteration\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncReplace =\n    <T>(value: AsyncIterable<T>, mapper?: (v: T, index?: number) => any):\n        Directive<NodePart> => directive(async (part: NodePart) => {\n          // If we've already set up this particular iterable, we don't need\n          // to do anything.\n          if (value === part.value) {\n            return;\n          }\n\n          // We nest a new part to keep track of previous item values separately\n          // of the iterable as a value itself.\n          const itemPart = new NodePart(part.templateFactory);\n          part.value = itemPart;\n\n          let i = 0;\n\n          for await (let v of value) {\n            // When we get the first value, clear the part. This let's the\n            // previous value display until we can replace it.\n            if (i === 0) {\n              part.clear();\n              itemPart.appendIntoPart(part);\n            }\n\n            // Check to make sure that value is the still the current value of\n            // the part, and if not bail because a new value owns this part\n            if (part.value !== itemPart) {\n              break;\n            }\n\n            // As a convenience, because functional-programming-style\n            // transforms of iterables and async iterables requires a library,\n            // we accept a mapper function. This is especially convenient for\n            // rendering a template for each item.\n            if (mapper !== undefined) {\n              v = mapper(v, i);\n            }\n\n            itemPart.setValue(v);\n            itemPart.commit();\n            i++;\n          }\n        });\n"]}